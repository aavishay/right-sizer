# Load generator to create realistic resource usage patterns
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: test-workloads
  labels:
    app: load-generator
    purpose: testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
        purpose: testing
      annotations:
        right-sizer.io/enabled: "false" # Exclude from right-sizing
    spec:
      containers:
        - name: load-generator
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              echo "Starting load generator..."

              # Function to generate CPU load
              cpu_load() {
                echo "Generating CPU load..."
                for i in $(seq 1 30); do
                  timeout 10s yes > /dev/null 2>&1 &
                  sleep 5
                done
                wait
              }

              # Function to generate memory load
              memory_load() {
                echo "Generating memory load..."
                # Create memory pressure
                dd if=/dev/zero of=/tmp/memtest bs=1M count=50 2>/dev/null
                sleep 30
                rm -f /tmp/memtest
              }

              # Function to generate network load
              network_load() {
                echo "Generating network load..."
                for i in $(seq 1 20); do
                  wget -q -O /dev/null http://web-frontend-service.test-workloads.svc.cluster.local/ &
                  wget -q -O /dev/null http://api-backend-service.test-workloads.svc.cluster.local:8080/ &
                  sleep 2
                done
                wait
              }

              # Main load generation loop
              while true; do
                echo "=== Load Generation Cycle Started ==="

                # Light load phase (5 minutes)
                echo "Phase 1: Light load (5 min)"
                for i in $(seq 1 5); do
                  network_load &
                  sleep 60
                done

                # Medium load phase (10 minutes)
                echo "Phase 2: Medium load (10 min)"
                for i in $(seq 1 10); do
                  cpu_load &
                  network_load &
                  sleep 60
                done

                # Heavy load phase (5 minutes)
                echo "Phase 3: Heavy load (5 min)"
                for i in $(seq 1 5); do
                  cpu_load &
                  memory_load &
                  network_load &
                  sleep 60
                done

                # Cool down phase (10 minutes)
                echo "Phase 4: Cool down (10 min)"
                sleep 600

                echo "=== Load Generation Cycle Completed ==="
              done
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
              ephemeral-storage: "100Mi"
            limits:
              cpu: "200m"
              memory: "128Mi"
              ephemeral-storage: "500Mi"
          env:
            - name: LOAD_DURATION
              value: "1800" # 30 minutes per cycle
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-scripts
  namespace: test-workloads
data:
  monitor.sh: |
    #!/bin/bash
    # Monitor resource usage and right-sizer activity

    echo "=== Right-Sizer Test Monitoring Started ==="
    echo "Timestamp: $(date)"
    echo ""

    while true; do
      echo "=== $(date) ==="

      echo "Pod Resource Usage:"
      kubectl top pods -n test-workloads --sort-by=memory 2>/dev/null || echo "Metrics not available yet"
      echo ""

      echo "Right-Sizer Operator Status:"
      kubectl get pods -n right-sizer -o wide
      echo ""

      echo "Right-Sizer Events:"
      kubectl get events -n test-workloads --field-selector reason=ResourceOptimization --sort-by=lastTimestamp | tail -5
      echo ""

      echo "Pod Resource Specifications:"
      kubectl get pods -n test-workloads -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[0].resources}{"\n"}{end}'
      echo ""

      echo "Right-Sizer Configs:"
      kubectl get rightsizerconfigs -A -o wide 2>/dev/null || echo "No RightSizerConfigs found"
      echo ""

      echo "Right-Sizer Policies:"
      kubectl get rightsizerpolicies -A -o wide 2>/dev/null || echo "No RightSizerPolicies found"
      echo ""

      echo "----------------------------------------"
      sleep 60
    done

  test-commands.sh: |
    #!/bin/bash
    # Test commands for Right-Sizer validation

    echo "=== Right-Sizer Test Commands ==="

    echo "1. Check operator status:"
    echo "kubectl get pods -n right-sizer"
    echo ""

    echo "2. View operator logs:"
    echo "kubectl logs -f -n right-sizer -l app.kubernetes.io/name=right-sizer"
    echo ""

    echo "3. Check test workloads:"
    echo "kubectl get pods -n test-workloads -o wide"
    echo ""

    echo "4. Monitor resource usage:"
    echo "kubectl top pods -n test-workloads"
    echo ""

    echo "5. Check for right-sizing events:"
    echo "kubectl get events -n test-workloads --sort-by=lastTimestamp"
    echo ""

    echo "6. View current resource specs:"
    echo "kubectl get deployment -n test-workloads -o yaml | grep -A 10 resources:"
    echo ""

    echo "7. Test both installation methods:"
    echo "# Traditional method"
    echo "helm repo add right-sizer https://aavishay.github.io/right-sizer/charts"
    echo "helm search repo right-sizer"
    echo ""
    echo "# OCI method (new)"
    echo "helm show chart oci://registry-1.docker.io/aavishay/right-sizer --version 0.1.19"
    echo ""
