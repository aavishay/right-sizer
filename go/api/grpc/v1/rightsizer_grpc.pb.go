// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/grpc/v1/rightsizer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RightSizerService_GetClusterInfo_FullMethodName  = "/rightsizer.v1.RightSizerService/GetClusterInfo"
	RightSizerService_GetMetrics_FullMethodName      = "/rightsizer.v1.RightSizerService/GetMetrics"
	RightSizerService_StreamEvents_FullMethodName    = "/rightsizer.v1.RightSizerService/StreamEvents"
	RightSizerService_ExecuteAction_FullMethodName   = "/rightsizer.v1.RightSizerService/ExecuteAction"
	RightSizerService_GetActionStatus_FullMethodName = "/rightsizer.v1.RightSizerService/GetActionStatus"
	RightSizerService_HealthCheck_FullMethodName     = "/rightsizer.v1.RightSizerService/HealthCheck"
)

// RightSizerServiceClient is the client API for RightSizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RightSizer service definition
type RightSizerServiceClient interface {
	// Get cluster information
	GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfo, error)
	// Get metrics
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	// Stream events
	StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error)
	// Execute remediation action
	ExecuteAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Get action status
	GetActionStatus(ctx context.Context, in *ActionStatusRequest, opts ...grpc.CallOption) (*ActionStatusResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type rightSizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRightSizerServiceClient(cc grpc.ClientConnInterface) RightSizerServiceClient {
	return &rightSizerServiceClient{cc}
}

func (c *rightSizerServiceClient) GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, RightSizerService_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightSizerServiceClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, RightSizerService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightSizerServiceClient) StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RightSizerService_ServiceDesc.Streams[0], RightSizerService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventStreamRequest, EventStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RightSizerService_StreamEventsClient = grpc.ServerStreamingClient[EventStreamResponse]

func (c *rightSizerServiceClient) ExecuteAction(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, RightSizerService_ExecuteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightSizerServiceClient) GetActionStatus(ctx context.Context, in *ActionStatusRequest, opts ...grpc.CallOption) (*ActionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionStatusResponse)
	err := c.cc.Invoke(ctx, RightSizerService_GetActionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightSizerServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, RightSizerService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RightSizerServiceServer is the server API for RightSizerService service.
// All implementations must embed UnimplementedRightSizerServiceServer
// for forward compatibility.
//
// RightSizer service definition
type RightSizerServiceServer interface {
	// Get cluster information
	GetClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfo, error)
	// Get metrics
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	// Stream events
	StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[EventStreamResponse]) error
	// Execute remediation action
	ExecuteAction(context.Context, *ActionRequest) (*ActionResponse, error)
	// Get action status
	GetActionStatus(context.Context, *ActionStatusRequest) (*ActionStatusResponse, error)
	// Health check
	HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedRightSizerServiceServer()
}

// UnimplementedRightSizerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRightSizerServiceServer struct{}

func (UnimplementedRightSizerServiceServer) GetClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedRightSizerServiceServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedRightSizerServiceServer) StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[EventStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedRightSizerServiceServer) ExecuteAction(context.Context, *ActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedRightSizerServiceServer) GetActionStatus(context.Context, *ActionStatusRequest) (*ActionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionStatus not implemented")
}
func (UnimplementedRightSizerServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRightSizerServiceServer) mustEmbedUnimplementedRightSizerServiceServer() {}
func (UnimplementedRightSizerServiceServer) testEmbeddedByValue()                           {}

// UnsafeRightSizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RightSizerServiceServer will
// result in compilation errors.
type UnsafeRightSizerServiceServer interface {
	mustEmbedUnimplementedRightSizerServiceServer()
}

func RegisterRightSizerServiceServer(s grpc.ServiceRegistrar, srv RightSizerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRightSizerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RightSizerService_ServiceDesc, srv)
}

func _RightSizerService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightSizerServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RightSizerService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightSizerServiceServer).GetClusterInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RightSizerService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightSizerServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RightSizerService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightSizerServiceServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RightSizerService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RightSizerServiceServer).StreamEvents(m, &grpc.GenericServerStream[EventStreamRequest, EventStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RightSizerService_StreamEventsServer = grpc.ServerStreamingServer[EventStreamResponse]

func _RightSizerService_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightSizerServiceServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RightSizerService_ExecuteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightSizerServiceServer).ExecuteAction(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RightSizerService_GetActionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightSizerServiceServer).GetActionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RightSizerService_GetActionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightSizerServiceServer).GetActionStatus(ctx, req.(*ActionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RightSizerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightSizerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RightSizerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightSizerServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RightSizerService_ServiceDesc is the grpc.ServiceDesc for RightSizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RightSizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rightsizer.v1.RightSizerService",
	HandlerType: (*RightSizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterInfo",
			Handler:    _RightSizerService_GetClusterInfo_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _RightSizerService_GetMetrics_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _RightSizerService_ExecuteAction_Handler,
		},
		{
			MethodName: "GetActionStatus",
			Handler:    _RightSizerService_GetActionStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RightSizerService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _RightSizerService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/grpc/v1/rightsizer.proto",
}
