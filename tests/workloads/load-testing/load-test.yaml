apiVersion: v1
kind: Namespace
metadata:
  name: load-test
  labels:
    right-sizer.io/enabled: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-scripts
  namespace: load-test
data:
  cpu-load.sh: |
    #!/bin/sh
    echo "Starting CPU load test..."

    # Function to generate CPU load
    generate_cpu_load() {
      duration=$1
      echo "Generating CPU load for ${duration} seconds..."
      timeout ${duration} sh -c 'while true; do :; done' &
      wait
    }

    # Main loop with varying load patterns
    while true; do
      echo "Phase 1: Low load (10 seconds)"
      sleep 10

      echo "Phase 2: Medium load (20 seconds)"
      generate_cpu_load 2
      sleep 18

      echo "Phase 3: High load (30 seconds)"
      generate_cpu_load 25
      sleep 5

      echo "Phase 4: Cool down (20 seconds)"
      sleep 20

      echo "Cycle complete. Restarting..."
    done

  memory-load.sh: |
    #!/bin/sh
    echo "Starting memory load test..."

    # Function to allocate memory
    allocate_memory() {
      size_mb=$1
      echo "Allocating ${size_mb}MB of memory..."
      dd if=/dev/zero of=/tmp/memfile_${size_mb} bs=1M count=${size_mb} 2>/dev/null
      cat /tmp/memfile_${size_mb} > /dev/null
    }

    # Clean up function
    cleanup() {
      echo "Cleaning up memory files..."
      rm -f /tmp/memfile_*
    }

    # Main loop with varying memory patterns
    while true; do
      cleanup

      echo "Phase 1: Low memory usage (20 seconds)"
      allocate_memory 10
      sleep 20

      echo "Phase 2: Medium memory usage (20 seconds)"
      allocate_memory 50
      sleep 20

      echo "Phase 3: High memory usage (20 seconds)"
      allocate_memory 100
      sleep 20

      echo "Phase 4: Release memory (10 seconds)"
      cleanup
      sleep 10

      echo "Cycle complete. Restarting..."
    done
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-load-generator
  namespace: load-test
  labels:
    app: cpu-load
    test-type: cpu
    right-sizer.io/enabled: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cpu-load
  template:
    metadata:
      labels:
        app: cpu-load
        right-sizer.io/enabled: "true"
        right-sizer.io/strategy: "adaptive"
        right-sizer.io/min-cpu: "10m"
        right-sizer.io/max-cpu: "500m"
        right-sizer.io/min-memory: "32Mi"
        right-sizer.io/max-memory: "256Mi"
    spec:
      containers:
      - name: cpu-generator
        image: alpine:latest
        command: ["/bin/sh"]
        args: ["/scripts/cpu-load.sh"]
        resources:
          requests:
            cpu: "50m"      # Start with low CPU
            memory: "64Mi"
          limits:
            cpu: "100m"     # Low initial limit
            memory: "128Mi"
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: load-scripts
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-load-generator
  namespace: load-test
  labels:
    app: memory-load
    test-type: memory
    right-sizer.io/enabled: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-load
  template:
    metadata:
      labels:
        app: memory-load
        right-sizer.io/enabled: "true"
        right-sizer.io/strategy: "conservative"
        right-sizer.io/min-cpu: "10m"
        right-sizer.io/max-cpu: "200m"
        right-sizer.io/min-memory: "64Mi"
        right-sizer.io/max-memory: "512Mi"
    spec:
      containers:
      - name: memory-generator
        image: alpine:latest
        command: ["/bin/sh"]
        args: ["/scripts/memory-load.sh"]
        resources:
          requests:
            cpu: "20m"
            memory: "128Mi"   # Start with moderate memory
          limits:
            cpu: "50m"
            memory: "200Mi"   # Initial limit that will need adjustment
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: load-scripts
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: balanced-load-generator
  namespace: load-test
  labels:
    app: balanced-load
    test-type: balanced
    right-sizer.io/enabled: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: balanced-load
  template:
    metadata:
      labels:
        app: balanced-load
        right-sizer.io/enabled: "true"
        right-sizer.io/strategy: "aggressive"
        right-sizer.io/min-cpu: "25m"
        right-sizer.io/max-cpu: "1000m"
        right-sizer.io/min-memory: "50Mi"
        right-sizer.io/max-memory: "1Gi"
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 15
      - name: sidecar-logger
        image: busybox:latest
        command: ["/bin/sh"]
        args:
        - "-c"
        - |
          echo "Starting sidecar logger..."
          while true; do
            echo "[$(date)] Processing logs..." >> /tmp/app.log
            tail -n 100 /tmp/app.log > /tmp/app.log.tmp && mv /tmp/app.log.tmp /tmp/app.log
            sleep 5
          done
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "25m"
            memory: "64Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: balanced-load-service
  namespace: load-test
spec:
  selector:
    app: balanced-load
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-info
  namespace: load-test
data:
  README: |
    Load Test Namespace
    ===================

    This namespace contains various load generators to test the Right-Sizer operator:

    1. CPU Load Generator
       - Cycles through different CPU load levels
       - Tests Right-Sizer's ability to scale CPU resources
       - Pattern: Low -> Medium -> High -> Cool down

    2. Memory Load Generator
       - Allocates varying amounts of memory
       - Tests Right-Sizer's ability to scale memory resources
       - Pattern: 10MB -> 50MB -> 100MB -> Release

    3. Balanced Load Generator
       - Runs nginx with a sidecar container
       - Tests multi-container pod optimization
       - Represents a more realistic workload

    Monitoring Commands:
    --------------------
    # Watch pods being resized
    kubectl get pods -n load-test -w

    # Check current resource usage
    kubectl top pods -n load-test

    # View Right-Sizer logs
    kubectl logs -n right-sizer deployment/right-sizer -f | grep load-test

    # Check pod resources
    kubectl get pods -n load-test -o custom-columns=\
    NAME:.metadata.name,\
    CPU_REQ:.spec.containers[0].resources.requests.cpu,\
    CPU_LIM:.spec.containers[0].resources.limits.cpu,\
    MEM_REQ:.spec.containers[0].resources.requests.memory,\
    MEM_LIM:.spec.containers[0].resources.limits.memory

    Expected Behavior:
    -----------------
    - CPU Load Generator: Should see CPU limits increase during high load phases
    - Memory Load Generator: Should see memory limits increase to accommodate allocations
    - Balanced Load Generator: Should stabilize at optimal resource levels for nginx

    Clean Up:
    ---------
    kubectl delete namespace load-test
