---
# Test namespace
apiVersion: v1
kind: Namespace
metadata:
  name: test-rightsizer
  labels:
    rightsizer: enabled

---
# Test deployment with intentionally oversized resources
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-app
  namespace: test-rightsizer
  labels:
    app: test-app
    environment: test
spec:
  replicas: 3
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
        environment: test
      annotations:
        rightsizer.io/enabled: "true"
        rightsizer.io/mode: "balanced"
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 500m      # Oversized for nginx
            memory: 512Mi  # Oversized for nginx
          limits:
            cpu: 1000m
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20

---
# Another test deployment with different resource patterns
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stress-app
  namespace: test-rightsizer
  labels:
    app: stress-app
    environment: test
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stress-app
  template:
    metadata:
      labels:
        app: stress-app
        environment: test
    spec:
      containers:
      - name: stress
        image: progrium/stress
        args:
        - "--cpu"
        - "1"
        - "--io"
        - "1"
        - "--vm"
        - "1"
        - "--vm-bytes"
        - "128M"
        - "--timeout"
        - "600s"
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi

---
# RightSizerPolicy for balanced sizing
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: balanced-policy
  namespace: test-rightsizer
spec:
  enabled: true
  priority: 100
  mode: balanced
  dryRun: false

  targetRef:
    kind: Deployment
    namespaces:
    - test-rightsizer
    labelSelector:
      matchLabels:
        environment: test

  resourceStrategy:
    cpu:
      requestMultiplier: 1.2
      limitMultiplier: 2.0
      minRequest: "10m"
      maxLimit: "2000m"
    memory:
      requestMultiplier: 1.3
      limitMultiplier: 1.8
      minRequest: "64Mi"
      maxLimit: "2Gi"

    utilizationTargets:
      targetCPUUtilization: 70
      targetMemoryUtilization: 80

    resizePolicy:
      mode: "InPlace"
      cooldownPeriod: "5m"
      maxIncreasePercent: 50
      maxDecreasePercent: 30

  schedule:
    enabled: true
    evaluationInterval: "1m"
    timezone: "UTC"

  constraints:
    minReplicas: 1
    maxReplicas: 10
    maxResourceChangePercent: 50
    requireAnnotation: false
    allowPrivileged: false
    protectedNamespaces:
    - kube-system
    - kube-public

  resourceAnnotations:
    "rightsizer.io/last-updated": "{{ .Timestamp }}"
    "rightsizer.io/policy": "balanced-policy"

---
# RightSizerPolicy for aggressive sizing (for stress-app)
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: aggressive-policy
  namespace: test-rightsizer
spec:
  enabled: true
  priority: 90
  mode: aggressive
  dryRun: false

  targetRef:
    kind: Deployment
    namespaces:
    - test-rightsizer
    labelSelector:
      matchLabels:
        app: stress-app

  resourceStrategy:
    cpu:
      requestMultiplier: 1.1
      limitMultiplier: 1.5
      minRequest: "50m"
      maxLimit: "1000m"
    memory:
      requestMultiplier: 1.1
      limitMultiplier: 1.5
      minRequest: "128Mi"
      maxLimit: "1Gi"

    utilizationTargets:
      targetCPUUtilization: 85
      targetMemoryUtilization: 90

    resizePolicy:
      mode: "InPlace"
      cooldownPeriod: "2m"
      maxIncreasePercent: 100
      maxDecreasePercent: 50

---
# RightSizerConfig for global configuration
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerConfig
metadata:
  name: default-config
  namespace: test-rightsizer
spec:
  enabled: true
  mode: adaptive

  resourceDefaults:
    cpu:
      defaultRequest: "100m"
      defaultLimit: "500m"
      requestToLimitRatio: 2.0
    memory:
      defaultRequest: "128Mi"
      defaultLimit: "512Mi"
      requestToLimitRatio: 2.0

  sizingStrategy:
    algorithm: "percentile"
    lookbackPeriod: "7d"
    sampleInterval: "1m"
    percentile: 95

    scalingFactors:
      scaleUpMultiplier: 1.2
      scaleDownMultiplier: 0.8
      minChangeThreshold: 10

    burstCapacity:
      cpuBurstPercentage: 50
      memoryBurstPercentage: 30

  monitoring:
    metricsProvider: "metrics-server"
    prometheusURL: ""
    scrapeInterval: "30s"
    retentionPeriod: "30d"

  operationalConfig:
    resizeMode: "InPlace"
    batchSize: 10
    concurrentOperations: 5
    retryAttempts: 3
    retryBackoff: "exponential"

    maintenanceWindow:
      enabled: false
      schedule: "0 2 * * *"
      duration: "2h"
      timezone: "UTC"

  namespaceConfig:
    includeNamespaces:
    - test-rightsizer
    excludeNamespaces:
    - kube-system
    - kube-public
    - kube-node-lease
    systemNamespaces:
    - kube-system
    - kube-public
    - kube-node-lease
    - right-sizer-system

  logging:
    level: "info"
    format: "json"
    enableAudit: true
    auditLogPath: "/var/log/right-sizer/audit.log"

  notifications:
    enabled: false
    channels: []

---
# Service to expose test-app
apiVersion: v1
kind: Service
metadata:
  name: test-app-service
  namespace: test-rightsizer
spec:
  selector:
    app: test-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

---
# ConfigMap with additional test configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-config
  namespace: test-rightsizer
data:
  description: |
    This is a test deployment for the Right Sizer operator.
    It includes:
    - Two deployments with different resource patterns
    - Two policies with different sizing strategies
    - A global configuration
    - Service exposure for the test app

  expected_behavior: |
    1. The test-app deployment should be right-sized based on actual usage
    2. The stress-app deployment should be sized more aggressively
    3. Resources should be adjusted within the defined constraints
    4. In-place resizing should occur without pod restarts (K8s 1.27+)
