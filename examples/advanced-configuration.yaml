# Right-Sizer Advanced Configuration Example
# This file demonstrates all available configuration options for the right-sizer operator

apiVersion: v1
kind: Namespace
metadata:
  name: right-sizer-system
  labels:
    app: right-sizer
    security.io/enhanced: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: right-sizer-config
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: configuration
data:
  # Basic resource multipliers
  CPU_REQUEST_MULTIPLIER: "1.3"
  MEMORY_REQUEST_MULTIPLIER: "1.4"
  CPU_LIMIT_MULTIPLIER: "2.5"
  MEMORY_LIMIT_MULTIPLIER: "2.0"

  # Resource boundaries
  MAX_CPU_LIMIT: "16000" # 16 cores in millicores
  MAX_MEMORY_LIMIT: "32768" # 32GB in MB
  MIN_CPU_REQUEST: "5" # 5 millicores
  MIN_MEMORY_REQUEST: "32" # 32 MB

  # Operational configuration
  RESIZE_INTERVAL: "45s"
  LOG_LEVEL: "debug"
  METRICS_PROVIDER: "prometheus"
  PROMETHEUS_URL: "http://prometheus.monitoring:9090"
  ENABLE_INPLACE_RESIZE: "true"
  DRY_RUN: "false"

  # Enhanced retry configuration
  MAX_RETRIES: "5"
  RETRY_INTERVAL: "3s"

  # Safety and validation settings
  SAFETY_THRESHOLD: "0.4" # 40% change threshold

  # Advanced features
  POLICY_BASED_SIZING: "true"
  HISTORY_DAYS: "14"
  CUSTOM_METRICS: "network_rx_bytes,network_tx_bytes,disk_io_utilization"
  ADMISSION_CONTROLLER: "true"

  # Observability settings
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  AUDIT_ENABLED: "true"

  # Namespace filtering
  KUBE_NAMESPACE_INCLUDE: "production,staging,development"
  KUBE_NAMESPACE_EXCLUDE: "kube-system,kube-public,cert-manager"

---
# ServiceAccount with enhanced permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
automountServiceAccountToken: true

---
# ClusterRole with comprehensive permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: right-sizer-operator
  labels:
    app: right-sizer
rules:
  # Custom Resource Definitions
  - apiGroups: ["rightsizer.io"]
    resources: ["rightsizerpolicies", "rightsizerconfigs"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["rightsizer.io"]
    resources: ["rightsizerpolicies/status", "rightsizerconfigs/status"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["rightsizer.io"]
    resources: ["rightsizerpolicies/finalizers", "rightsizerconfigs/finalizers"]
    verbs: ["update"]

  # Core pod operations
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["get", "list", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods/resize"]
    verbs: ["patch", "update"]

  # Node information for capacity validation
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/status"]
    verbs: ["get", "list", "watch"]

  # Metrics API for resource usage data
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes", "podmetrics", "nodemetrics"]
    verbs: ["get", "list", "watch"]

  # Custom and external metrics
  - apiGroups: ["custom.metrics.k8s.io", "external.metrics.k8s.io"]
    resources: ["*"]
    verbs: ["get", "list", "watch"]

  # Workload controllers management
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
    verbs: ["get", "list", "watch", "patch", "update"]
  - apiGroups: ["apps"]
    resources:
      [
        "deployments/status",
        "statefulsets/status",
        "daemonsets/status",
        "replicasets/status",
      ]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments/scale", "statefulsets/scale", "replicasets/scale"]
    verbs: ["get", "patch", "update"]

  # Batch jobs
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]

  # Events for logging resize operations
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "update"]

  # ConfigMaps for configuration
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]

  # Secrets for sensitive configuration
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]

  # Namespaces for multi-namespace support
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]

  # HorizontalPodAutoscalers to avoid conflicts
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list", "watch"]

  # VerticalPodAutoscalers to avoid conflicts (if VPA is installed)
  - apiGroups: ["autoscaling.k8s.io"]
    resources: ["verticalpodautoscalers"]
    verbs: ["get", "list", "watch"]

  # PodDisruptionBudgets for safe operations
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]

  # ResourceQuotas to respect namespace limits
  - apiGroups: [""]
    resources: ["resourcequotas"]
    verbs: ["get", "list", "watch"]

  # LimitRanges to respect namespace constraints
  - apiGroups: [""]
    resources: ["limitranges"]
    verbs: ["get", "list", "watch"]

  # PersistentVolumeClaims for storage resource validation
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]

  # PersistentVolumes for cluster-wide storage information
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]

  # StorageClasses for storage provisioning information
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]

  # PriorityClasses for pod scheduling priority information
  - apiGroups: ["scheduling.k8s.io"]
    resources: ["priorityclasses"]
    verbs: ["get", "list", "watch"]

  # NetworkPolicies for network segmentation validation
  - apiGroups: ["networking.k8s.io"]
    resources: ["networkpolicies"]
    verbs: ["get", "list", "watch"]

  # Services for admission webhook support
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

  # Endpoints for service discovery
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]

  # Admission controller webhooks (if enabled)
  - apiGroups: ["admissionregistration.k8s.io"]
    resources:
      ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: right-sizer-operator
  labels:
    app: right-sizer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: right-sizer-operator
subjects:
  - kind: ServiceAccount
    name: right-sizer-operator
    namespace: right-sizer-system

---
# PersistentVolumeClaim for audit logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: right-sizer-audit-logs
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: audit
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# Secret for admission webhook TLS certificates
apiVersion: v1
kind: Secret
metadata:
  name: right-sizer-admission-certs
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: admission-webhook
type: kubernetes.io/tls
data:
  # These would be populated by cert-manager or manual certificate generation
  tls.crt: LS0tLS1CRUdJTi... # base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # base64 encoded private key

---
# Advanced Deployment with all features enabled
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: operator
    version: v1.0.0
spec:
  replicas: 2 # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: right-sizer
      component: operator
  template:
    metadata:
      labels:
        app: right-sizer
        component: operator
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        config.alpha.kubernetes.io/dependency: "prometheus.monitoring"
    spec:
      serviceAccountName: right-sizer-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: operator
          image: right-sizer:latest
          imagePullPolicy: Always
          ports:
            - name: http-metrics
              containerPort: 9090
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
            - name: admission
              containerPort: 8443
              protocol: TCP
          env:
            - name: GOMAXPROCS
              value: "2"
            - name: GOGC
              value: "100"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: right-sizer-config
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 1Gi
              ephemeral-storage: 5Gi
          livenessProbe:
            httpGet:
              path: /healthz
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: health
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: audit-logs
              mountPath: /var/log/right-sizer
            - name: admission-certs
              mountPath: /etc/certs
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /var/cache/right-sizer
      volumes:
        - name: audit-logs
          persistentVolumeClaim:
            claimName: right-sizer-audit-logs
        - name: admission-certs
          secret:
            secretName: right-sizer-admission-certs
            defaultMode: 0400
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: cache
          emptyDir:
            sizeLimit: 2Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: right-sizer
                    component: operator
                topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300

---
# Service for metrics and health checks
apiVersion: v1
kind: Service
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: operator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9090
      targetPort: http-metrics
      protocol: TCP
    - name: health
      port: 8081
      targetPort: health
      protocol: TCP
  selector:
    app: right-sizer
    component: operator

---
# Service for admission webhook
apiVersion: v1
kind: Service
metadata:
  name: right-sizer-admission-webhook
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: admission-webhook
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: admission
      protocol: TCP
  selector:
    app: right-sizer
    component: operator

---
# ValidatingAdmissionWebhook for resource validation
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: right-sizer-resource-validator
  labels:
    app: right-sizer
    component: admission-webhook
webhooks:
  - name: validate.rightsizer.io
    clientConfig:
      service:
        name: right-sizer-admission-webhook
        namespace: right-sizer-system
        path: /validate
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
      - operations: ["UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods/resize"]
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: name
          operator: NotIn
          values: ["kube-system", "kube-public", "right-sizer-system"]

---
# ServiceMonitor for Prometheus metrics scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: monitoring
spec:
  selector:
    matchLabels:
      app: right-sizer
      component: operator
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
      honorLabels: true
      metricRelabelings:
        - sourceLabels: [__name__]
          regex: "rightsizer_.*"
          action: keep

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: right-sizer
      component: operator
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
    - from: [] # Allow admission webhook from anywhere
      ports:
        - protocol: TCP
          port: 8443
  egress:
    - to: [] # Allow all outbound (for Kubernetes API, metrics, etc.)

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: operator
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: right-sizer
      component: operator

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: right-sizer-operator
  namespace: right-sizer-system
  labels:
    app: right-sizer
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: right-sizer-operator
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 60

---
# Example test deployment to validate right-sizer functionality
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-workload
  namespace: default
  labels:
    app: test-workload
    rightsizer.io/enabled: "true"
    priority: medium
    workload-type: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: test-workload
  template:
    metadata:
      labels:
        app: test-workload
        priority: medium
        workload-type: web
      annotations:
        rightsizer.io/cpu-multiplier: "1.5"
        rightsizer.io/memory-multiplier: "1.3"
    spec:
      containers:
        - name: web-server
          image: nginx:alpine
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 256Mi
          ports:
            - containerPort: 80
              name: http

---
# Example high-priority workload
apiVersion: apps/v1
kind: Deployment
metadata:
  name: critical-service
  namespace: production
  labels:
    app: critical-service
    priority: high
    environment: production
    app.kubernetes.io/component: backend
spec:
  replicas: 5
  selector:
    matchLabels:
      app: critical-service
  template:
    metadata:
      labels:
        app: critical-service
        priority: high
        environment: production
        app.kubernetes.io/component: backend
      annotations:
        rightsizer.io/priority: high
        rightsizer.io/safety-threshold: "0.3"
    spec:
      containers:
        - name: backend
          image: myapp/backend:v1.0.0
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          env:
            - name: ENVIRONMENT
              value: production
            - name: LOG_LEVEL
              value: info
