apiVersion: v1
kind: Namespace
metadata:
  name: real-test-workloads
  labels:
    name: real-test-workloads
    rightsizer.io/enable: "true"
---
# CPU Intensive Workload
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-intensive
  namespace: real-test-workloads
  labels:
    app: cpu-intensive
    test-type: real-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cpu-intensive
  template:
    metadata:
      labels:
        app: cpu-intensive
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: cpu-worker
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting CPU intensive workload..."
          while true; do
            # Calculate pi to generate CPU load
            echo "scale=5000; 4*a(1)" | awk 'BEGIN {for(i=0;i<100000;i++) print i*i}' > /dev/null
            sleep 1
          done
        resources:
          requests:
            cpu: "500m"  # Over-provisioned
            memory: "128Mi"
          limits:
            cpu: "1000m"
            memory: "256Mi"
---
# Memory Intensive Workload
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-intensive
  namespace: real-test-workloads
  labels:
    app: memory-intensive
    test-type: real-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-intensive
  template:
    metadata:
      labels:
        app: memory-intensive
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: memory-worker
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting memory intensive workload..."
          # Allocate 50MB in memory
          dd if=/dev/zero of=/tmp/bigfile bs=1M count=50
          # Keep it in memory
          while true; do
            cat /tmp/bigfile > /dev/null
            sleep 10
          done
        resources:
          requests:
            cpu: "100m"
            memory: "512Mi"  # Over-provisioned
          limits:
            cpu: "200m"
            memory: "1Gi"
---
# Idle Workload (Over-provisioned)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: idle-overprovisioned
  namespace: real-test-workloads
  labels:
    app: idle-overprovisioned
    test-type: real-metrics
spec:
  replicas: 2
  selector:
    matchLabels:
      app: idle-overprovisioned
  template:
    metadata:
      labels:
        app: idle-overprovisioned
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: idle-app
        image: nginx:alpine
        resources:
          requests:
            cpu: "250m"  # Way over-provisioned for idle nginx
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        ports:
        - containerPort: 80
---
# Bursty Workload
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bursty-workload
  namespace: real-test-workloads
  labels:
    app: bursty-workload
    test-type: real-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bursty-workload
  template:
    metadata:
      labels:
        app: bursty-workload
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: bursty-app
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting bursty workload..."
          while true; do
            # High load for 20 seconds
            echo "Burst phase..."
            timeout 20 sh -c 'while true; do echo "scale=1000; 4*a(1)" | awk "BEGIN {for(i=0;i<10000;i++) print i}" > /dev/null; done'
            # Idle for 40 seconds
            echo "Idle phase..."
            sleep 40
          done
        resources:
          requests:
            cpu: "300m"
            memory: "128Mi"
          limits:
            cpu: "600m"
            memory: "256Mi"
---
# Steady State Workload
apiVersion: apps/v1
kind: Deployment
metadata:
  name: steady-state
  namespace: real-test-workloads
  labels:
    app: steady-state
    test-type: real-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: steady-state
  template:
    metadata:
      labels:
        app: steady-state
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: steady-app
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting steady state workload..."
          # Consistent moderate load
          while true; do
            # Generate consistent 30-50m CPU usage
            for i in $(seq 1 50000); do
              echo $i > /dev/null
            done
            sleep 0.5
          done
        resources:
          requests:
            cpu: "200m"  # Over-provisioned
            memory: "64Mi"
          limits:
            cpu: "400m"
            memory: "128Mi"
---
# Web Server with Variable Load
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-server
  namespace: real-test-workloads
  labels:
    app: web-server
    test-type: real-metrics
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-server
  template:
    metadata:
      labels:
        app: web-server
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: web
        image: httpd:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: "150m"
            memory: "200Mi"
          limits:
            cpu: "300m"
            memory: "400Mi"
---
# Service for Web Server
apiVersion: v1
kind: Service
metadata:
  name: web-server
  namespace: real-test-workloads
spec:
  selector:
    app: web-server
  ports:
  - port: 80
    targetPort: 80
---
# Load Generator Job
apiVersion: batch/v1
kind: Job
metadata:
  name: load-generator
  namespace: real-test-workloads
spec:
  template:
    spec:
      containers:
      - name: load-gen
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Generating load on web servers..."
          for i in $(seq 1 100); do
            wget -q -O- http://web-server > /dev/null 2>&1 &
          done
          wait
          echo "Load generation complete"
      restartPolicy: OnFailure
---
# Database Simulation (Memory Heavy)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database-sim
  namespace: real-test-workloads
  labels:
    app: database-sim
    test-type: real-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database-sim
  template:
    metadata:
      labels:
        app: database-sim
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: db
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting database simulation..."
          # Create a 100MB "database" file
          dd if=/dev/zero of=/tmp/database.db bs=1M count=100
          # Simulate database operations
          while true; do
            # Read operations
            dd if=/tmp/database.db of=/dev/null bs=1M count=10
            # Write operations
            dd if=/dev/zero of=/tmp/database.db bs=1M count=1 seek=$((RANDOM % 100)) conv=notrunc
            sleep 2
          done
        resources:
          requests:
            cpu: "200m"
            memory: "500Mi"  # Over-provisioned
          limits:
            cpu: "400m"
            memory: "1Gi"
---
# Correctly Sized Application (Control)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: correctly-sized
  namespace: real-test-workloads
  labels:
    app: correctly-sized
    test-type: real-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: correctly-sized
  template:
    metadata:
      labels:
        app: correctly-sized
        rightsizer.io/enable: "true"
    spec:
      containers:
      - name: app
        image: busybox
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting correctly sized workload..."
          # Generate exactly 50m CPU usage
          while true; do
            # Calibrated loop for ~50m CPU
            for i in $(seq 1 25000); do
              echo $i > /dev/null
            done
            sleep 1
          done
        resources:
          requests:
            cpu: "50m"  # Correctly sized
            memory: "32Mi"
          limits:
            cpu: "100m"
            memory: "64Mi"
