# Right-Sizer Configuration Scenarios
# This file provides example configurations for different use cases

---
# Scenario 1: Conservative Configuration
# Best for: Production workloads where stability is critical
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-conservative
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: right-sizer
  template:
    metadata:
      labels:
        app: right-sizer
    spec:
      serviceAccountName: right-sizer
      containers:
        - name: right-sizer
          image: right-sizer:latest
          env:
            # Conservative multipliers - provide more headroom
            - name: CPU_REQUEST_MULTIPLIER
              value: "1.5"  # 50% buffer over actual usage
            - name: MEMORY_REQUEST_MULTIPLIER
              value: "1.4"  # 40% buffer over actual usage
            - name: CPU_LIMIT_MULTIPLIER
              value: "2.5"  # Allow 2.5x burst over request
            - name: MEMORY_LIMIT_MULTIPLIER
              value: "2.0"  # Allow 2x burst over request
            # Higher resource caps for production
            - name: MAX_CPU_LIMIT
              value: "8000"  # Up to 8 cores
            - name: MAX_MEMORY_LIMIT
              value: "16384" # Up to 16GB
            - name: MIN_CPU_REQUEST
              value: "50"    # Higher minimum for stability
            - name: MIN_MEMORY_REQUEST
              value: "256"   # Higher minimum memory

---
# Scenario 2: Aggressive Cost Optimization
# Best for: Development/staging environments where cost savings are prioritized
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-aggressive
  namespace: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: right-sizer
  template:
    metadata:
      labels:
        app: right-sizer
    spec:
      serviceAccountName: right-sizer
      containers:
        - name: right-sizer
          image: right-sizer:latest
          env:
            # Aggressive multipliers - minimal overhead
            - name: CPU_REQUEST_MULTIPLIER
              value: "1.1"  # Only 10% buffer
            - name: MEMORY_REQUEST_MULTIPLIER
              value: "1.1"  # Only 10% buffer
            - name: CPU_LIMIT_MULTIPLIER
              value: "1.5"  # Lower burst capacity
            - name: MEMORY_LIMIT_MULTIPLIER
              value: "1.5"  # Lower burst capacity
            # Lower resource caps for cost savings
            - name: MAX_CPU_LIMIT
              value: "2000"  # Max 2 cores
            - name: MAX_MEMORY_LIMIT
              value: "4096"  # Max 4GB
            - name: MIN_CPU_REQUEST
              value: "5"     # Very low minimum
            - name: MIN_MEMORY_REQUEST
              value: "32"    # Very low minimum memory

---
# Scenario 3: Balanced Configuration (Default)
# Best for: General purpose workloads
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-balanced
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: right-sizer
  template:
    metadata:
      labels:
        app: right-sizer
    spec:
      serviceAccountName: right-sizer
      containers:
        - name: right-sizer
          image: right-sizer:latest
          env:
            # Balanced multipliers (defaults)
            - name: CPU_REQUEST_MULTIPLIER
              value: "1.2"  # 20% buffer
            - name: MEMORY_REQUEST_MULTIPLIER
              value: "1.2"  # 20% buffer
            - name: CPU_LIMIT_MULTIPLIER
              value: "2.0"  # 2x burst capacity
            - name: MEMORY_LIMIT_MULTIPLIER
              value: "2.0"  # 2x burst capacity
            # Reasonable caps
            - name: MAX_CPU_LIMIT
              value: "4000"  # Max 4 cores
            - name: MAX_MEMORY_LIMIT
              value: "8192"  # Max 8GB
            - name: MIN_CPU_REQUEST
              value: "10"    # Standard minimum
            - name: MIN_MEMORY_REQUEST
              value: "64"    # Standard minimum memory

---
# Scenario 4: High-Performance Workloads
# Best for: Latency-sensitive applications, databases, cache servers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-high-performance
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: right-sizer
  template:
    metadata:
      labels:
        app: right-sizer
    spec:
      serviceAccountName: right-sizer
      containers:
        - name: right-sizer
          image: right-sizer:latest
          env:
            # Higher multipliers for performance headroom
            - name: CPU_REQUEST_MULTIPLIER
              value: "1.8"  # 80% buffer for consistent performance
            - name: MEMORY_REQUEST_MULTIPLIER
              value: "1.5"  # 50% buffer to avoid memory pressure
            - name: CPU_LIMIT_MULTIPLIER
              value: "3.0"  # High burst capacity for spikes
            - name: MEMORY_LIMIT_MULTIPLIER
              value: "2.5"  # Extra memory headroom
            # High resource caps
            - name: MAX_CPU_LIMIT
              value: "16000" # Up to 16 cores
            - name: MAX_MEMORY_LIMIT
              value: "32768" # Up to 32GB
            - name: MIN_CPU_REQUEST
              value: "100"   # Higher baseline
            - name: MIN_MEMORY_REQUEST
              value: "512"   # Higher baseline memory

---
# Scenario 5: Batch Processing / Jobs
# Best for: Periodic batch jobs, data processing workloads
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-batch
  namespace: batch-processing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: right-sizer
  template:
    metadata:
      labels:
        app: right-sizer
    spec:
      serviceAccountName: right-sizer
      containers:
        - name: right-sizer
          image: right-sizer:latest
          env:
            # Moderate requests, high limits for burst processing
            - name: CPU_REQUEST_MULTIPLIER
              value: "1.2"  # Standard buffer
            - name: MEMORY_REQUEST_MULTIPLIER
              value: "1.3"  # Slightly higher for data processing
            - name: CPU_LIMIT_MULTIPLIER
              value: "4.0"  # Very high burst for batch processing
            - name: MEMORY_LIMIT_MULTIPLIER
              value: "3.0"  # High memory burst for data-intensive tasks
            # High caps for batch workloads
            - name: MAX_CPU_LIMIT
              value: "12000" # Up to 12 cores for parallel processing
            - name: MAX_MEMORY_LIMIT
              value: "24576" # Up to 24GB for large datasets
            - name: MIN_CPU_REQUEST
              value: "50"    # Reasonable minimum
            - name: MIN_MEMORY_REQUEST
              value: "256"   # Reasonable minimum for batch

---
# Scenario 6: Microservices with Variable Load
# Best for: Microservices that experience variable traffic patterns
apiVersion: apps/v1
kind: Deployment
metadata:
  name: right-sizer-microservices
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: right-sizer
  template:
    metadata:
      labels:
        app: right-sizer
    spec:
      serviceAccountName: right-sizer
      containers:
        - name: right-sizer
          image: right-sizer:latest
          env:
            # Adaptive configuration for variable load
            - name: CPU_REQUEST_MULTIPLIER
              value: "1.3"  # Moderate buffer
            - name: MEMORY_REQUEST_MULTIPLIER
              value: "1.25" # Moderate buffer
            - name: CPU_LIMIT_MULTIPLIER
              value: "3.0"  # High burst for traffic spikes
            - name: MEMORY_LIMIT_MULTIPLIER
              value: "2.5"  # Good memory headroom
            # Moderate caps suitable for microservices
            - name: MAX_CPU_LIMIT
              value: "2000"  # Typically microservices don't need huge resources
            - name: MAX_MEMORY_LIMIT
              value: "4096"  # 4GB max is usually sufficient
            - name: MIN_CPU_REQUEST
              value: "25"    # Small but not tiny
            - name: MIN_MEMORY_REQUEST
              value: "128"   # Reasonable minimum for JVM/Node.js apps

---
# Helm Values Examples
# These can be used with: helm install right-sizer ./charts/right-sizer -f <values-file>

# values-conservative.yaml
config:
  cpuRequestMultiplier: 1.5
  memoryRequestMultiplier: 1.4
  cpuLimitMultiplier: 2.5
  memoryLimitMultiplier: 2.0
  maxCpuLimit: 8000
  maxMemoryLimit: 16384
  minCpuRequest: 50
  minMemoryRequest: 256

---
# values-aggressive.yaml
config:
  cpuRequestMultiplier: 1.1
  memoryRequestMultiplier: 1.1
  cpuLimitMultiplier: 1.5
  memoryLimitMultiplier: 1.5
  maxCpuLimit: 2000
  maxMemoryLimit: 4096
  minCpuRequest: 5
  minMemoryRequest: 32

---
# values-high-performance.yaml
config:
  cpuRequestMultiplier: 1.8
  memoryRequestMultiplier: 1.5
  cpuLimitMultiplier: 3.0
  memoryLimitMultiplier: 2.5
  maxCpuLimit: 16000
  maxMemoryLimit: 32768
  minCpuRequest: 100
  minMemoryRequest: 512
