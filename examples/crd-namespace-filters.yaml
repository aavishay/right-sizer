# Examples demonstrating namespace include/exclude patterns in Right-Sizer CRDs
# Shows how global and policy-level namespace filters work together

---
# Example 1: Global Configuration with Namespace Filters
# This config excludes system namespaces and only monitors production/staging
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerConfig
metadata:
  name: production-namespace-filter
spec:
  enabled: true
  defaultMode: balanced
  resizeInterval: "5m"

  # Global namespace configuration
  namespaceConfig:
    # Only monitor these namespaces (empty means all)
    includeNamespaces:
      - production
      - staging
      - pre-production

    # Never monitor these namespaces (always excluded)
    excludeNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease
      - cert-manager
      - istio-system
      - linkerd
      - monitoring
      - logging

    # System namespaces that should never be modified (added to exclude list)
    systemNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease
      - right-sizer

    # Select namespaces by labels (additional filter)
    namespaceLabels:
      rightsizer: "enabled"
      environment: "production"

  defaultResourceStrategy:
    cpu:
      requestMultiplier: 1.2
      requestAddition: 100
    memory:
      requestMultiplier: 1.2
      requestAddition: 256

---
# Example 2: Development Environment - Include Pattern
# Only monitors development and test namespaces
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerConfig
metadata:
  name: dev-namespace-filter
spec:
  enabled: true
  defaultMode: aggressive
  resizeInterval: "1m"

  namespaceConfig:
    # Explicitly include only dev/test namespaces
    includeNamespaces:
      - dev
      - dev-team-a
      - dev-team-b
      - test
      - test-integration
      - sandbox
      - experiments

    # Still exclude critical system namespaces
    excludeNamespaces:
      - kube-system
      - kube-public
      - right-sizer

    systemNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease

---
# Example 3: Exclude Pattern Only
# Monitor all namespaces except the excluded ones
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerConfig
metadata:
  name: exclude-only-filter
spec:
  enabled: true
  defaultMode: balanced
  resizeInterval: "3m"

  namespaceConfig:
    # Empty include list means all namespaces are considered
    includeNamespaces: []

    # But exclude these specific namespaces
    excludeNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease
      - istio-system
      - cert-manager
      - external-dns
      - ingress-nginx
      - monitoring
      - logging
      - vault
      - argocd
      - flux-system
      - temporal
      - kafka
      - redis
      - elasticsearch

    systemNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease
      - right-sizer

---
# Example 4: Policy with Namespace Override
# This policy targets specific namespaces regardless of global config
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: cross-namespace-policy
  namespace: right-sizer
spec:
  enabled: true
  priority: 200
  mode: balanced

  # Policy-specific namespace targeting
  targetRef:
    kind: Deployment
    # These namespaces are checked even if not in global include list
    # BUT they will still be skipped if in global exclude list
    namespaces:
      - frontend
      - backend
      - api
      - microservices

    # Additional exclusions for this policy
    excludeNamespaces:
      - frontend-experimental
      - backend-legacy

    labelSelector:
      matchLabels:
        app-tier: web

---
# Example 5: Policy Inheriting Global Namespace Config
# This policy doesn't specify namespaces, so it uses global config
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: inherit-global-namespaces
  namespace: right-sizer
spec:
  enabled: true
  priority: 100
  mode: conservative

  targetRef:
    kind: StatefulSet
    # No namespaces specified - will use global include/exclude lists
    namespaces: []

    # Can still add policy-specific exclusions
    excludeNamespaces:
      - databases-test

    labelSelector:
      matchLabels:
        tier: database

---
# Example 6: Namespace Label-Based Selection
# Global config that selects namespaces based on labels
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerConfig
metadata:
  name: label-based-selection
spec:
  enabled: true
  defaultMode: balanced
  resizeInterval: "5m"

  namespaceConfig:
    # Empty include means check all namespaces
    includeNamespaces: []

    # But filter by namespace labels
    namespaceLabels:
      # Only namespaces with these labels will be monitored
      rightsizer.io/enabled: "true"
      cost-optimization: "enabled"

    # Still exclude system namespaces
    excludeNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease

---
# Example 7: Complex Multi-Environment Setup
# Different policies for different environment namespaces
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerConfig
metadata:
  name: multi-environment-config
spec:
  enabled: true
  defaultMode: balanced
  resizeInterval: "2m"

  namespaceConfig:
    # Include all environment namespaces
    includeNamespaces:
      - prod-frontend
      - prod-backend
      - prod-database
      - staging-frontend
      - staging-backend
      - staging-database
      - dev-frontend
      - dev-backend
      - dev-database

    # Exclude temporary and system namespaces
    excludeNamespaces:
      - temp-deployments
      - load-testing
      - chaos-engineering
      - kube-system
      - kube-public

    systemNamespaces:
      - kube-system
      - kube-public
      - kube-node-lease
      - right-sizer

---
# Production policy - conservative
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: production-conservative
  namespace: right-sizer
spec:
  enabled: true
  priority: 300  # Highest priority
  mode: conservative

  targetRef:
    kind: Deployment
    namespaces:
      - prod-frontend
      - prod-backend
      - prod-database
    labelSelector:
      matchLabels:
        environment: production

  resourceStrategy:
    cpu:
      requestMultiplier: 1.5
      requestAddition: 200
    memory:
      requestMultiplier: 1.4
      requestAddition: 512

---
# Staging policy - balanced
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: staging-balanced
  namespace: right-sizer
spec:
  enabled: true
  priority: 200
  mode: balanced

  targetRef:
    kind: Deployment
    namespaces:
      - staging-frontend
      - staging-backend
      - staging-database
    labelSelector:
      matchLabels:
        environment: staging

  resourceStrategy:
    cpu:
      requestMultiplier: 1.2
      requestAddition: 100
    memory:
      requestMultiplier: 1.2
      requestAddition: 256

---
# Development policy - aggressive
apiVersion: rightsizer.io/v1alpha1
kind: RightSizerPolicy
metadata:
  name: development-aggressive
  namespace: right-sizer
spec:
  enabled: true
  priority: 100  # Lowest priority
  mode: aggressive

  targetRef:
    kind: Deployment
    namespaces:
      - dev-frontend
      - dev-backend
      - dev-database
    labelSelector:
      matchLabels:
        environment: development

  resourceStrategy:
    cpu:
      requestMultiplier: 1.05
      requestAddition: 0
    memory:
      requestMultiplier: 1.05
      requestAddition: 0

---
# Example 8: Namespace Filtering Rules Summary
# This ConfigMap documents how namespace filtering works
apiVersion: v1
kind: ConfigMap
metadata:
  name: namespace-filtering-rules
  namespace: right-sizer
data:
  rules.md: |
    # Namespace Filtering Rules in Right-Sizer

    ## Global Configuration (RightSizerConfig)

    1. **includeNamespaces**:
       - If empty/not set: All namespaces are considered
       - If set: Only listed namespaces are considered

    2. **excludeNamespaces**:
       - Always applied, regardless of includeNamespaces
       - Takes precedence over includeNamespaces

    3. **systemNamespaces**:
       - Automatically added to excludeNamespaces
       - Cannot be overridden by policies

    4. **namespaceLabels**:
       - Additional filter based on namespace labels
       - Applied after include/exclude filtering

    ## Policy-Level Configuration (RightSizerPolicy)

    1. **targetRef.namespaces**:
       - If set: Overrides global includeNamespaces for this policy
       - If empty: Uses global includeNamespaces
       - Still subject to global excludeNamespaces

    2. **targetRef.excludeNamespaces**:
       - Additional exclusions for this specific policy
       - Added to global excludeNamespaces

    ## Processing Order

    1. Start with policy namespaces (if set) or global includeNamespaces
    2. Remove all namespaces in global excludeNamespaces
    3. Remove all namespaces in global systemNamespaces
    4. Remove all namespaces in policy excludeNamespaces
    5. Apply namespace label filters (if configured)
    6. Result: Final list of namespaces to monitor

    ## Examples

    ### Scenario 1: Global include=[A,B,C], exclude=[C,D]
    - Result: Monitors namespaces [A,B]

    ### Scenario 2: Global include=[], exclude=[kube-system]
    - Result: Monitors all namespaces except kube-system

    ### Scenario 3: Global include=[prod], Policy namespaces=[prod,staging]
    - Result: Policy monitors [prod,staging] if staging not in global exclude

    ### Scenario 4: Global exclude=[test], Policy namespaces=[test]
    - Result: Policy skips test namespace (global exclude takes precedence)
