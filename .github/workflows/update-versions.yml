name: Update Versions

on:
  workflow_dispatch:
    inputs:
      version:
        description: "New version (e.g., 0.1.7, 1.0.0, 1.0.0-beta.1)"
        required: true
        type: string
      create_pr:
        description: "Create Pull Request instead of direct commit"
        required: false
        type: boolean
        default: true
      branch_name:
        description: "Branch name for PR (auto-generated if empty)"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  update-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1, 1.0.0+build.1)"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current
        run: |
          if [[ -f "helm/Chart.yaml" ]]; then
            CURRENT_VERSION=$(grep '^version:' helm/Chart.yaml | sed 's/version: *//' | tr -d '"')
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Current version: $CURRENT_VERSION"
          else
            echo "CURRENT_VERSION=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ Could not detect current version"
          fi

      - name: Determine branch name
        id: branch
        run: |
          if [[ -n "${{ github.event.inputs.branch_name }}" ]]; then
            BRANCH_NAME="${{ github.event.inputs.branch_name }}"
          else
            BRANCH_NAME="chore/update-version-${{ github.event.inputs.version }}"
          fi
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name: $BRANCH_NAME"

      - name: Create and checkout branch
        if: ${{ github.event.inputs.create_pr == 'true' }}
        run: |
          git checkout -b ${{ steps.branch.outputs.BRANCH_NAME }}
          echo "Created and switched to branch: ${{ steps.branch.outputs.BRANCH_NAME }}"

      - name: Run version update script
        run: |
          # Make script executable
          chmod +x scripts/update-versions.sh

          # Run the update script
          echo "🚀 Running version update script..."
          ./scripts/update-versions.sh "${{ github.event.inputs.version }}"

      - name: Verify changes
        run: |
          echo "📋 Changes made:"
          git status --porcelain | sed 's/^/  /'

          echo ""
          echo "📊 Change summary:"
          git diff --stat

          echo ""
          echo "🔍 Key file checks:"

          # Check Helm Chart.yaml
          if [[ -f "helm/Chart.yaml" ]]; then
            echo "Helm Chart version:"
            grep '^version:\|^appVersion:' helm/Chart.yaml | sed 's/^/  /'
          fi

          # Check version references in README
          if [[ -f "README.md" ]]; then
            BADGE_COUNT=$(grep -c "Version-${{ github.event.inputs.version }}-green" README.md || echo "0")
            DOCKER_COUNT=$(grep -c "aavishay/right-sizer:${{ github.event.inputs.version }}" README.md || echo "0")
            echo "README.md updates:"
            echo "  Version badges: $BADGE_COUNT"
            echo "  Docker references: $DOCKER_COUNT"
          fi

      - name: Commit changes
        run: |
          if git diff --quiet; then
            echo "⚠️ No changes to commit"
            exit 0
          fi

          git add -A

          # Create detailed commit message
          cat > commit_message.txt << EOF
          chore: update version to ${{ github.event.inputs.version }}

          This automated update includes:
          - Updated version badges in README files
          - Updated Docker image tags and references
          - Updated Helm chart version and appVersion
          - Updated installation examples and documentation

          Previous version: ${{ steps.current.outputs.CURRENT_VERSION }}
          New version: ${{ github.event.inputs.version }}

          Generated by: ${{ github.workflow }} workflow
          Triggered by: @${{ github.actor }}
          EOF

          git commit -F commit_message.txt

          echo "✅ Changes committed successfully"

      - name: Push changes (direct to main)
        if: ${{ github.event.inputs.create_pr == 'false' }}
        run: |
          git push origin main
          echo "✅ Changes pushed directly to main branch"

      - name: Push changes (to branch)
        if: ${{ github.event.inputs.create_pr == 'true' }}
        run: |
          git push origin ${{ steps.branch.outputs.BRANCH_NAME }}
          echo "✅ Changes pushed to branch: ${{ steps.branch.outputs.BRANCH_NAME }}"

      - name: Create Pull Request
        if: ${{ github.event.inputs.create_pr == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR body
          cat > pr_body.md << EOF
          ## 🏷️ Version Update: ${{ steps.current.outputs.CURRENT_VERSION }} → ${{ github.event.inputs.version }}

          This PR updates all version references across the project to **${{ github.event.inputs.version }}**.

          ### 📦 Changes Included

          - ✅ Updated version badges in README files
          - ✅ Updated Docker image tags and references
          - ✅ Updated Helm chart \`version\` and \`appVersion\`
          - ✅ Updated installation examples and documentation
          - ✅ Updated ArgoCD and OCI registry examples

          ### 🔍 Files Modified

          $(git diff --name-only HEAD~1 | sed 's/^/- /')

          ### 🚀 Next Steps

          After merging this PR:

          1. **Create and push a git tag:**
             \`\`\`bash
             git tag v${{ github.event.inputs.version }}
             git push origin v${{ github.event.inputs.version }}
             \`\`\`

          2. **This will automatically trigger:**
             - 🐳 Docker image builds and publishing
             - 📦 Helm chart packaging and publishing
             - 📋 GitHub release creation
             - 🔄 Distribution to all registries

          ### 🧪 Testing

          Please verify:
          - [ ] All version references are correctly updated
          - [ ] README examples use the new version
          - [ ] Helm chart versions match
          - [ ] No broken links or references

          ---

          *This PR was automatically generated by the \`Update Versions\` workflow.*
          *Triggered by: @${{ github.actor }}*
          EOF

          # Create the PR
          PR_URL=$(gh pr create \
            --title "chore: update version to ${{ github.event.inputs.version }}" \
            --body-file pr_body.md \
            --base main \
            --head ${{ steps.branch.outputs.BRANCH_NAME }} \
            --label "version-update" \
            --label "chore")

          echo "✅ Pull Request created: $PR_URL"
          echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## 🎉 Version Update Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Update Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.current.outputs.CURRENT_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ steps.branch.outputs.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create PR:** ${{ github.event.inputs.create_pr }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event.inputs.create_pr }}" == "true" ]]; then
            echo "### 📝 Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "A pull request has been created for review." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Review and merge the PR" >> $GITHUB_STEP_SUMMARY
            echo "2. Create git tag: \`git tag v${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Push tag: \`git push origin v${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Direct Commit" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changes have been committed directly to the main branch." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Create git tag: \`git tag v${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Push tag: \`git push origin v${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Automatic Triggers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "After creating the tag, the following will happen automatically:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker images will be built and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Helm charts will be packaged and published" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 GitHub release will be created" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 Distribution to all registries" >> $GITHUB_STEP_SUMMARY
