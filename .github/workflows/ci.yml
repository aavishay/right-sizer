name: CI

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: "1.25"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: go
          args: --timeout=5m

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go/go.sum

      - name: Download dependencies
        working-directory: ./go
        run: |
          go mod download
          go mod verify

      - name: Run tests with coverage
        working-directory: ./go
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out -o coverage.txt
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk u'{print $3}' | sed u's/%//')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE%"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./go/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: right-sizer:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"

      - name: Lint Helm chart
        run: |
          helm lint helm/
          helm template test helm/ --validate

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, helm-lint]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Helm Lint: ${{ needs.helm-lint.result }}"

          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]] || \
             [[ "${{ needs.helm-lint.result }}" != "success" ]]; then
            echo "❌ Some checks failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi
