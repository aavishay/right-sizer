name: GitHub Actions Notifications

on:
  workflow_run:
    workflows: ["GitHub Actions Monitoring"]
    types:
      - completed
  schedule:
    # Send daily summary at 9 AM UTC
    - cron: "0 9 * * *"
  workflow_dispatch:
    inputs:
      force_notification:
        description: 'Force send notification regardless of thresholds'
        required: false
        default: false
        type: boolean

jobs:
  slack-notification:
    name: Send Slack Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.name == 'GitHub Actions Monitoring')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest metrics
        id: metrics
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to get latest metrics from monitoring workflow
          if [ -f .github/metrics/latest.json ]; then
            echo "Using cached metrics"
            METRICS=$(cat .github/metrics/latest.json)
          else
            echo "Fetching fresh metrics"
            # Fallback to API call for current status
            python3 << 'EOF'
            import requests
            import json
            import os
            from datetime import datetime, timedelta
            from dateutil import parser

            REPO = "${{ github.repository }}"
            TOKEN = os.environ["GH_TOKEN"]
            headers = {
                "Authorization": f"Bearer {TOKEN}",
                "Accept": "application/vnd.github+json"
            }

            # Get last 24h of runs
            since = datetime.utcnow() - timedelta(hours=24)
            url = f"https://api.github.com/repos/{REPO}/actions/runs"
            params = {"per_page": 50, "created": f">={since.isoformat()}Z"}

            response = requests.get(url, headers=headers, params=params)
            runs = response.json()["workflow_runs"]

            metrics = {
                "total_runs": len(runs),
                "success_count": sum(1 for r in runs if r["conclusion"] == "success"),
                "failure_count": sum(1 for r in runs if r["conclusion"] == "failure"),
                "cancelled_count": sum(1 for r in runs if r["conclusion"] == "cancelled")
            }

            print(json.dumps(metrics))
            EOF
          fi

          # Extract key metrics for output
          TOTAL=$(echo "$METRICS" | jq -r '.total_runs // 0')
          SUCCESS=$(echo "$METRICS" | jq -r '.success_count // 0')
          FAILURES=$(echo "$METRICS" | jq -r '.failure_count // 0')

          if [ "$TOTAL" -gt 0 ]; then
            SUCCESS_RATE=$(echo "scale=1; $SUCCESS * 100 / $TOTAL" | bc -l)
          else
            SUCCESS_RATE="0"
          fi

          echo "total_runs=$TOTAL" >> $GITHUB_OUTPUT
          echo "success_count=$SUCCESS" >> $GITHUB_OUTPUT
          echo "failure_count=$FAILURES" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT

      - name: Determine notification level
        id: notification
        run: |
          TOTAL=${{ steps.metrics.outputs.total_runs }}
          FAILURES=${{ steps.metrics.outputs.failure_count }}
          SUCCESS_RATE=${{ steps.metrics.outputs.success_rate }}
          FORCE=${{ github.event.inputs.force_notification }}

          # Calculate failure rate
          if [ "$TOTAL" -gt 0 ]; then
            FAILURE_RATE=$(echo "scale=1; $FAILURES * 100 / $TOTAL" | bc -l)
          else
            FAILURE_RATE="0"
          fi

          # Determine alert level
          ALERT_LEVEL="none"
          SHOULD_NOTIFY="false"

          if [ "$FORCE" = "true" ]; then
            ALERT_LEVEL="info"
            SHOULD_NOTIFY="true"
            echo "üîî Force notification requested"
          elif [ "$TOTAL" -eq 0 ]; then
            echo "‚ÑπÔ∏è No runs in the last 24h"
          elif (( $(echo "$FAILURE_RATE >= 30" | bc -l) )); then
            ALERT_LEVEL="critical"
            SHOULD_NOTIFY="true"
            echo "üö® Critical: High failure rate detected"
          elif (( $(echo "$FAILURE_RATE >= 15" | bc -l) )); then
            ALERT_LEVEL="warning"
            SHOULD_NOTIFY="true"
            echo "‚ö†Ô∏è Warning: Elevated failure rate"
          elif (( $(echo "$SUCCESS_RATE <= 85" | bc -l) )) && [ "$TOTAL" -gt 5 ]; then
            ALERT_LEVEL="warning"
            SHOULD_NOTIFY="true"
            echo "‚ö†Ô∏è Warning: Low success rate"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            ALERT_LEVEL="daily"
            SHOULD_NOTIFY="true"
            echo "üìä Daily summary notification"
          fi

          echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
          echo "should_notify=$SHOULD_NOTIFY" >> $GITHUB_OUTPUT
          echo "failure_rate=$FAILURE_RATE" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: steps.notification.outputs.should_notify == 'true' && secrets.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          ALERT_LEVEL=${{ steps.notification.outputs.alert_level }}
          TOTAL=${{ steps.metrics.outputs.total_runs }}
          SUCCESS=${{ steps.metrics.outputs.success_count }}
          FAILURES=${{ steps.metrics.outputs.failure_count }}
          SUCCESS_RATE=${{ steps.metrics.outputs.success_rate }}
          FAILURE_RATE=${{ steps.notification.outputs.failure_rate }}

          # Determine emoji and color based on alert level
          case "$ALERT_LEVEL" in
            "critical")
              EMOJI="üö®"
              COLOR="danger"
              TITLE="Critical Alert"
              ;;
            "warning")
              EMOJI="‚ö†Ô∏è"
              COLOR="warning"
              TITLE="Warning Alert"
              ;;
            "daily")
              EMOJI="üìä"
              COLOR="good"
              TITLE="Daily Summary"
              ;;
            *)
              EMOJI="‚ÑπÔ∏è"
              COLOR="good"
              TITLE="Info"
              ;;
          esac

          # Create Slack message
          cat > slack_message.json << EOF
          {
            "username": "GitHub Actions Monitor",
            "icon_emoji": ":github:",
            "attachments": [
              {
                "color": "$COLOR",
                "title": "$EMOJI $TITLE - ${{ github.repository }}",
                "title_link": "https://github.com/${{ github.repository }}/actions",
                "fields": [
                  {
                    "title": "Success Rate (24h)",
                    "value": "${SUCCESS_RATE}%",
                    "short": true
                  },
                  {
                    "title": "Total Runs",
                    "value": "$TOTAL",
                    "short": true
                  },
                  {
                    "title": "Successful",
                    "value": "$SUCCESS",
                    "short": true
                  },
                  {
                    "title": "Failed",
                    "value": "$FAILURES",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions Monitor",
                "ts": $(date +%s)
              }
            ]
          }
          EOF

          # Add action buttons for critical/warning alerts
          if [ "$ALERT_LEVEL" = "critical" ] || [ "$ALERT_LEVEL" = "warning" ]; then
            cat > slack_message_with_actions.json << EOF
          {
            "username": "GitHub Actions Monitor",
            "icon_emoji": ":github:",
            "attachments": [
              {
                "color": "$COLOR",
                "title": "$EMOJI $TITLE - ${{ github.repository }}",
                "title_link": "https://github.com/${{ github.repository }}/actions",
                "fields": [
                  {
                    "title": "Success Rate (24h)",
                    "value": "${SUCCESS_RATE}%",
                    "short": true
                  },
                  {
                    "title": "Total Runs",
                    "value": "$TOTAL",
                    "short": true
                  },
                  {
                    "title": "Successful",
                    "value": "$SUCCESS",
                    "short": true
                  },
                  {
                    "title": "Failed",
                    "value": "$FAILURES",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Actions",
                    "url": "https://github.com/${{ github.repository }}/actions"
                  },
                  {
                    "type": "button",
                    "text": "View Dashboard",
                    "url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dashboard.html"
                  }
                ],
                "footer": "GitHub Actions Monitor",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
            mv slack_message_with_actions.json slack_message.json
          fi

          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
               --data @slack_message.json \
               "$SLACK_WEBHOOK_URL"

          echo "‚úÖ Slack notification sent"

      - name: Send email notification
        if: steps.notification.outputs.should_notify == 'true' && steps.notification.outputs.alert_level != 'daily' && secrets.EMAIL_TO != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
          server_port: ${{ secrets.SMTP_PORT || '587' }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "${{ steps.notification.outputs.alert_level == 'critical' && 'üö® CRITICAL' || '‚ö†Ô∏è WARNING' }} GitHub Actions Alert - ${{ github.repository }}"
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM || secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>${{ steps.notification.outputs.alert_level == 'critical' && 'üö® Critical Alert' || '‚ö†Ô∏è Warning Alert' }}</h2>

            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Time:</strong> $(date -u)</p>

            <h3>Metrics (Last 24 hours)</h3>
            <ul>
              <li><strong>Success Rate:</strong> ${{ steps.metrics.outputs.success_rate }}%</li>
              <li><strong>Total Runs:</strong> ${{ steps.metrics.outputs.total_runs }}</li>
              <li><strong>Successful:</strong> ${{ steps.metrics.outputs.success_count }}</li>
              <li><strong>Failed:</strong> ${{ steps.metrics.outputs.failure_count }}</li>
            </ul>

            <h3>Actions Required</h3>
            <ul>
              <li>Review failed workflow runs</li>
              <li>Check for infrastructure issues</li>
              <li>Verify recent code changes</li>
            </ul>

            <p><a href="https://github.com/${{ github.repository }}/actions">View GitHub Actions</a></p>
            <p><a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dashboard.html">View Dashboard</a></p>

            <hr>
            <p><small>This email was sent automatically by GitHub Actions Monitor</small></p>

      - name: Create status check
        if: steps.notification.outputs.alert_level == 'critical' || steps.notification.outputs.alert_level == 'warning'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const alertLevel = '${{ steps.notification.outputs.alert_level }}';
            const successRate = '${{ steps.metrics.outputs.success_rate }}';

            const state = alertLevel === 'critical' ? 'failure' : 'error';
            const description = `Actions health: ${successRate}% success rate (24h)`;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions`,
              description: description,
              context: 'github-actions/health-monitor'
            });

      - name: Update workflow summary
        if: always()
        run: |
          echo "### üìä GitHub Actions Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Alert Level:** ${{ steps.notification.outputs.alert_level }}" >> $GITHUB_STEP_SUMMARY
          echo "**Total Runs (24h):** ${{ steps.metrics.outputs.total_runs }}" >> $GITHUB_STEP_SUMMARY
          echo "**Success Rate:** ${{ steps.metrics.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Runs:** ${{ steps.metrics.outputs.failure_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.notification.outputs.should_notify }}" = "true" ]; then
            echo "‚úÖ **Notification sent**" >> $GITHUB_STEP_SUMMARY

            if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
              echo "- Slack: ‚úÖ Sent" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Slack: ‚ùå No webhook configured" >> $GITHUB_STEP_SUMMARY
            fi

            if [ -n "${{ secrets.EMAIL_TO }}" ] && [ "${{ steps.notification.outputs.alert_level }}" != "daily" ]; then
              echo "- Email: ‚úÖ Sent" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Email: ‚ûñ Skipped (daily summary or not configured)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ÑπÔ∏è **No notification sent** (thresholds not met)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To configure notifications, add these secrets:" >> $GITHUB_STEP_SUMMARY
          echo "- \`SLACK_WEBHOOK_URL\`: Slack incoming webhook URL" >> $GITHUB_STEP_SUMMARY
          echo "- \`EMAIL_TO\`: Email address for alerts" >> $GITHUB_STEP_SUMMARY
          echo "- \`EMAIL_USERNAME\`: SMTP username" >> $GITHUB_STEP_SUMMARY
          echo "- \`EMAIL_PASSWORD\`: SMTP password" >> $GITHUB_STEP_SUMMARY
