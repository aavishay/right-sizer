name: Test

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "release/**"
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  GO_VERSION: "1.24"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23", "1.24"] # Test on multiple Go versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go/go.sum

      - name: Get dependencies
        run: |
          cd go
          go mod download
          go mod verify

      - name: Run go fmt
        run: |
          cd go
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need to be formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: |
          cd go
          go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          working-directory: go

      - name: Run tests with race detector
        run: |
          cd go
          go test -race -short -v ./...

      - name: Run tests with coverage
        run: |
          cd go
          go test -v -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./go/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage report
        run: |
          cd go
          go tool cover -html=coverage.out -o coverage.html

          # Calculate coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"

          # Add to GitHub summary
          echo "### Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if coverage meets threshold
          THRESHOLD=70
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "⚠️ Coverage ${COVERAGE}% is below threshold of ${THRESHOLD}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold of ${THRESHOLD}%" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.go-version }}
          path: go/coverage.html
          retention-days: 7

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go/go.sum

      - name: Set up Kind
        uses: helm/kind-action@v1
        with:
          cluster_name: test-cluster
          node_image: kindest/node:v1.30.0
          wait: 60s

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      - name: Test cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A

      - name: Run integration tests
        run: |
          if [ -d "tests/integration" ]; then
            cd go
            go test -tags=integration -v ../tests/integration/...
          else
            echo "No integration tests found, skipping..."
          fi

      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name test-cluster || true

  benchmark:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go/go.sum

      - name: Run benchmarks
        run: |
          cd go
          go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

          echo "### Benchmark Results 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat benchmark.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: go/benchmark.txt
          retention-days: 7

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go/go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: go
          args: --timeout=5m --config=../.golangci.yml
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt sarif -out gosec-results.sarif ./go/..."

      - name: Upload Gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

      - name: Run govulncheck
        run: |
          cd go
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true

  all-tests-passed:
    runs-on: ubuntu-latest
    needs: [test, integration-test, benchmark, lint, security-scan]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" != "success" ||
                "${{ needs.integration-test.result }}" != "success" ||
                "${{ needs.benchmark.result }}" != "success" ||
                "${{ needs.lint.result }}" != "success" ||
                "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "❌ Some tests failed"
            exit 1
          fi
          echo "✅ All tests passed successfully!"

          echo "### Test Suite Summary ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Benchmarks | ${{ needs.benchmark.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
