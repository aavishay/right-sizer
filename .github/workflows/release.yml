name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: go/go.sum

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_SHORT=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          cd go
          VERSION="${{ steps.version.outputs.VERSION }}"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=${GITHUB_SHA::8}

          BINARY_NAME="right-sizer-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build -ldflags="-w -s -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}" \
            -o "../${BINARY_NAME}" \
            main.go

          cd ..
          chmod +x "${BINARY_NAME}" || true

          # Create archive
          if [ "$GOOS" = "windows" ]; then
            zip "right-sizer-${VERSION}-${GOOS}-${GOARCH}.zip" "${BINARY_NAME}" README.md LICENSE
          else
            tar czf "right-sizer-${VERSION}-${GOOS}-${GOARCH}.tar.gz" "${BINARY_NAME}" README.md LICENSE
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            right-sizer-*.tar.gz
            right-sizer-*.zip
          retention-days: 1

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_SHORT=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/right-sizer
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.VERSION }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            GIT_COMMIT=${{ github.sha }}

  build-helm-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_SHORT=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update Helm chart version
        run: |
          VERSION="${{ steps.version.outputs.VERSION_SHORT }}"
          sed -i "s/^version:.*/version: ${VERSION}/" helm/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" helm/Chart.yaml

      - name: Package Helm chart
        run: |
          helm package helm/
          mv right-sizer-*.tgz right-sizer-helm-${{ steps.version.outputs.VERSION }}.tgz

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: right-sizer-helm-*.tgz
          retention-days: 1

  create-release:
    needs: [build-binaries, build-docker, build-helm-chart]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Move artifacts to release directory
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.tgz" \) -exec mv {} release/ \;
          ls -la release/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.VERSION }}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "This is the first release!" > changelog.md
          else
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md

            # Get commit messages between tags
            git log --pretty=format:"* %s (%an)" ${PREV_TAG}..${{ steps.version.outputs.VERSION }} >> changelog.md
          fi

          echo "" >> changelog.md
          echo "## Docker Images" >> changelog.md
          echo "" >> changelog.md
          echo "### GitHub Container Registry" >> changelog.md
          echo '```bash' >> changelog.md
          echo "docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "### Docker Hub" >> changelog.md
          echo '```bash' >> changelog.md
          echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/right-sizer:${{ steps.version.outputs.VERSION }}" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "## Helm Installation" >> changelog.md
          echo '```bash' >> changelog.md
          echo "helm install right-sizer right-sizer-helm-${{ steps.version.outputs.VERSION }}.tgz" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "## Checksums" >> changelog.md
          echo '```' >> changelog.md
          cd release && sha256sum * >> ../changelog.md
          cd ..
          echo '```' >> changelog.md

          cat changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-rc') || contains(steps.version.outputs.VERSION, '-beta') || contains(steps.version.outputs.VERSION, '-alpha') }}
          files: release/*
          generate_release_notes: true

      - name: Update Release Summary
        run: |
          echo "## 🎉 Release ${{ steps.version.outputs.VERSION }} Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following artifacts were published:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ls -1 release/ | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/right-sizer:${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Release Page" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }})" >> $GITHUB_STEP_SUMMARY

  publish-helm-chart:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Create gh-pages branch if needed
        run: |
          git fetch origin gh-pages || git checkout -b gh-pages
          git checkout gh-pages || git checkout -b gh-pages
          mkdir -p charts

      - name: Package and index Helm chart
        run: |
          helm package helm/ -d charts/
          helm repo index charts/ --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/charts

          git add charts/
          git commit -m "Update Helm chart for version ${{ github.ref_name }}" || true
          git push origin gh-pages || git push --set-upstream origin gh-pages
