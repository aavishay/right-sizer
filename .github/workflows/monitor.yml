name: CI Monitor

on:
  workflow_run:
    workflows: ["Docker", "Test", "Helm", "Release"]
    types: [completed]

jobs:
  summarize-failures:
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    runs-on: ubuntu-latest
    steps:
      - name: Fetch run details
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const {owner, repo} = context.repo;
            const attempt = run.run_attempt;
            const url = run.html_url;
            const wfName = run.name;
            const conclusion = run.conclusion;

            // Get the jobs for this run
            const jobs = await github.paginate(github.rest.actions.listJobsForWorkflowRun, {owner, repo, run_id: run.id, per_page: 100});
            const failedJobs = jobs.filter(j => j.conclusion !== 'success');

            let body = `❌ Workflow '${wfName}' (${run.id}) concluded: ${conclusion}\n`;
            body += `Commit: ${run.head_sha}\nActor: ${run.actor.login}\nAttempt: ${attempt}\nURL: ${url}\n`;
            body += `Branch: ${run.head_branch}\nRepository: ${owner}/${repo}\n`;
            if (failedJobs.length === 0) {
              body += `All jobs succeeded? (Unexpected because conclusion is ${conclusion}).\n`;
            } else {
              body += `Failed/Incomplete Jobs (${failedJobs.length}):\n`;
              for (const j of failedJobs) {
                body += ` - ${j.name}: status=${j.status} conclusion=${j.conclusion} started=${j.started_at} finished=${j.completed_at}\n`;
              }
            }

            // Heuristic hints
            const hints = [];
            if (failedJobs.some(j => /Build and push/i.test(j.name))) hints.push('Check Docker Hub credentials or tag immutability (already pushed tag).');
            if (failedJobs.some(j => /Helm Lint/i.test(j.name))) hints.push('Run `helm lint helm/` locally to reproduce.');
            if (failedJobs.some(j => /Test Job/i.test(j.name))) hints.push('Run `cd go && go test -v ./...` locally.');
            if (failedJobs.some(j => /Publish Helm Chart/i.test(j.name))) hints.push('Verify gh-pages branch permissions and index update logic.');
            if (!hints.length) hints.push('Review job logs for specific stack traces or exit codes.');
            body += `\nHints:\n - ${hints.join('\n - ')}\n`;

            // Create or update an issue
            const issueTitle = `[CI] Failure: ${wfName} (${run.head_branch})`; 
            // Search open issues with same title
            const issues = await github.rest.issues.listForRepo({owner, repo, state: 'open', per_page: 100});
            const existing = issues.data.find(i => i.title === issueTitle);
            if (existing) {
              await github.rest.issues.createComment({owner, repo, issue_number: existing.number, body});
            } else {
              await github.rest.issues.create({owner, repo, title: issueTitle, body});
            }
            core.notice(`Posted CI failure summary for run ${run.id}`);

      - name: Output summary
        run: echo "CI failure summary issue created or updated."